// –ü—Ä–æ—Å—Ç–æ–π popup script - –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞
document.addEventListener('DOMContentLoaded', function () {
    const toggleBtn = document.getElementById('toggleBtn');
    const status = document.getElementById('status');
    const rowLengthInput = document.getElementById('rowLength');

    let botActive = false;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    chrome.storage.sync.get(['rowLength'], function (result) {
        if (result.rowLength) {
            rowLengthInput.value = result.rowLength;
        }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    rowLengthInput.addEventListener('change', function () {
        const newRowLength = parseInt(rowLengthInput.value);
        chrome.storage.sync.set({
            rowLength: newRowLength
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞
        if (botActive) {
            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                chrome.scripting.executeScript({
                    target: { tabId: tabs[0].id },
                    func: updateBotSettings,
                    args: [{ rowLength: newRowLength }]
                }, function (results) {
                    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                    rowLengthInput.classList.add('updated');
                    setTimeout(() => {
                        rowLengthInput.classList.remove('updated');
                    }, 500);
                });
            });
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popup
    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
        chrome.scripting.executeScript({
            target: { tabId: tabs[0].id },
            func: checkBotStatus
        }, function (results) {
            if (results && results[0] && results[0].result) {
                updateStatus(results[0].result.active);
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    toggleBtn.addEventListener('click', function () {
        if (!botActive) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = {
                rowLength: parseInt(rowLengthInput.value)
            };
            chrome.storage.sync.set(settings);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                chrome.scripting.executeScript({
                    target: { tabId: tabs[0].id },
                    func: startSnakeBot,
                    args: [settings]
                });
                updateStatus(true);
            });
        } else {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                chrome.scripting.executeScript({
                    target: { tabId: tabs[0].id },
                    func: stopSnakeBot
                });
                updateStatus(false);
            });
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–Ω–æ–ø–∫–∏
    function updateStatus(active) {
        botActive = active;

        if (active) {
            status.textContent = 'ÔøΩ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω';
            status.className = 'status active';
            toggleBtn.textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞';
            toggleBtn.className = 'button stop-btn';
        } else {
            status.textContent = 'üî¥ –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
            status.className = 'status inactive';
            toggleBtn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞';
            toggleBtn.className = 'button start-btn';
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–∫–æ–ø–∏—è instant_response_bot)
function startSnakeBot(settings = {}) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
    if (window.instantBot && window.instantBot.active) {
        console.log('üêç Snake Bot —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const InstantResponseBot = {
        active: false,
        direction: 'right',
        moves: 0,
        rowLength: settings.rowLength || 12,

        instantPress(key) {
            document.dispatchEvent(new KeyboardEvent('keydown', {
                key: key,
                code: key,
                bubbles: true
            }));
        },

        doublePress(key1, key2) {
            this.instantPress(key1);
            setTimeout(() => this.instantPress(key2), 1);
        },

        fastMove() {
            const progressText = document.body.innerText;
            const match = progressText.match(/Progress\s+(\d+)/);
            if (match) {
                const score = parseInt(match[1]);
                if (score >= 1000) {
                    this.stop();
                    console.log('üèÜ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –°—á–µ—Ç:', score);
                    return;
                }
            }

            if (this.moves >= this.rowLength) {
                const newDirection = this.direction === 'right' ? 'left' : 'right';
                const newKey = newDirection === 'right' ? 'ArrowRight' : 'ArrowLeft';

                this.doublePress('ArrowDown', newKey);

                this.direction = newDirection;
                this.moves = 1;

                console.log('‚ö° –ü–æ–≤–æ—Ä–æ—Ç:', newDirection);
            } else {
                this.instantPress(this.direction === 'right' ? 'ArrowRight' : 'ArrowLeft');
                this.moves++;
            }
        },

        start() {
            this.active = true;
            this.direction = 'right';
            this.moves = 0;

            console.log('üöÄ Snake Bot –∑–∞–ø—É—â–µ–Ω! –®–∞–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ:', this.rowLength);

            this.gameTimer = setInterval(() => {
                if (this.active) {
                    this.fastMove();
                }
            }, 70);
        },

        stop() {
            this.active = false;
            if (this.gameTimer) {
                clearInterval(this.gameTimer);
            }
            console.log('‚èπÔ∏è Snake Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    };

    window.instantBot = InstantResponseBot;
    InstantResponseBot.start();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
function stopSnakeBot() {
    if (window.instantBot) {
        window.instantBot.stop();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
function checkBotStatus() {
    if (window.instantBot) {
        return { active: window.instantBot.active };
    }
    return { active: false };
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞
function updateBotSettings(settings) {
    if (window.instantBot && window.instantBot.active) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –ª–µ—Ç—É
        if (settings.rowLength !== undefined) {
            window.instantBot.rowLength = settings.rowLength;
            console.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: –®–∞–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ =', settings.rowLength);
        }
        return { success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' };
    }
    return { success: false, message: '–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' };
}